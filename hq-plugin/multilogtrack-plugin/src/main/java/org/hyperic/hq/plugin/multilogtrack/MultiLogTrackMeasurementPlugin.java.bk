/*
 * NOTE: This copyright does *not* cover user programs that use HQ
 * program services by normal system calls through the application
 * program interfaces provided as part of the Hyperic Plug-in Development
 * Kit or the Hyperic Client Development Kit - this is merely considered
 * normal use of the program, and does *not* fall under the heading of
 * "derived work".
 * 
 * Copyright (C) [2004-2012], VMWare, Inc.
 * This file is part of HQ.
 * 
 * HQ is free software; you can redistribute it and/or modify
 * it under the terms version 2 of the GNU General Public License as
 * published by the Free Software Foundation. This program is distributed
 * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
 */

package org.hyperic.hq.plugin.multilogtrack;

import java.io.File;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hyperic.hq.product.MeasurementPlugin;
import org.hyperic.hq.product.Metric;
import org.hyperic.hq.product.MetricUnreachableException;
import org.hyperic.hq.product.MetricValue;
import org.hyperic.util.TimeUtil;

public class MultiLogTrackMeasurementPlugin extends MeasurementPlugin {
    
    private static final Log log = LogFactory.getLog(MultiLogTrackMeasurementPlugin.class);
    public static final Map<String, Map<String, TimeList>> numLinesPerPattern =
        new HashMap<String, Map<String, TimeList>>();
    public static final Map<String, Map<String, TimeList>> lastLinesPerPattern =
        new HashMap<String, Map<String, TimeList>>();

    @Override
    public MetricValue getValue(Metric metric) throws MetricUnreachableException {
        String pattern = metric.getObjectProperty("logfilepattern");
        String alias = metric.getAttributeName();
        String logfilePattern = (pattern == null) ? "" : pattern;
        String basedir = metric.getObjectProperty("basedir");
        boolean overrideChecks = Boolean.parseBoolean(metric.getObjectProperty(MultiLogTrackServerDetector.OVERRIDE_CHECKS));
        basedir = MultiLogTrackServerDetector.getBasedir(basedir);
        List<String> files = MultiLogTrackServerDetector.getFilesCached(logfilePattern, basedir, false);
        if (metric.isAvail()) {
            if (!overrideChecks && (files == null || files.isEmpty())) {
                return new MetricValue(Metric.AVAIL_DOWN);
            }
            return new MetricValue(Metric.AVAIL_UP);
        } else if (alias.equals("NumCapturedLogs")) {
            TimeList num = getNumLinesAndClear(MultiLogTrackPlugin.INCLUDE_PATTERN, basedir + "," + logfilePattern);
log.debug(basedir + "," + logfilePattern + ", num=" + num.size());
            return new MetricValue(num.size());
        } else if (alias.equals("SecondaryNumCapturedLogs")) {
            TimeList num = getNumLinesAndClear(MultiLogTrackPlugin.INCLUDE_PATTERN_2, basedir + "," + logfilePattern);
log.debug(basedir + "," + logfilePattern + ", 2ndnum=" + num.size());
            return new MetricValue(num.size());
        } else if (alias.equals("DiffNumCapturedLogs")) {
            TimeList tl = getNumLinesAndClear(MultiLogTrackPlugin.INCLUDE_PATTERN, basedir + "," + logfilePattern);
            TimeList tl2 = getNumLinesAndClear(MultiLogTrackPlugin.INCLUDE_PATTERN_2, basedir + "," + logfilePattern);
            MetricValue diff = getDiff(tl, tl2);
log.debug(basedir + "," + logfilePattern + ", diff=" + diff.getValue());
            return diff;
        }
        if (basedir != null) {
            final File f = new File(basedir);
            try {
                if (!f.canRead() && f.exists()) {
                    throw new MetricUnreachableException("basedir=" + basedir + " exists but is not readable by the agent user");
                } else if (overrideChecks) {
                    // do nothing
                } else if (!f.isDirectory()) {
                    throw new MetricUnreachableException("basedir=" + basedir + " exists but is not a directory");
                } else if (!f.exists()) {
                    throw new MetricUnreachableException("basedir=" + basedir + " does not exist");
                }
            } catch (Exception e) {
                throw new MetricUnreachableException("unexpected error while attempting to read the basedir: " + e, e);
            }
        }
        if (!overrideChecks && (files == null || files.isEmpty())) {
            throw new MetricUnreachableException("no files were matched from the logfilepattern");
        }
        return new MetricValue(files.size());
    }

    private MetricValue getDiff(TimeList tl, TimeList tl2) {
        tl = (tl == null || tl.isEmpty()) ? new TimeList(0) : tl;
        tl2 = (tl2 == null || tl2.isEmpty()) ? new TimeList(0) : tl2;
        int val = tl.last().compareTo(tl2.last());
        return (val <= 0) ? new MetricValue(0) : new MetricValue(1);
    }

    private static TimeList getNumLinesAndClear(String property, String key) {
        TimeList last = getLastCachedValue(property, key);
        if (last != null) {
            return last;
        }
        Map<String, TimeList> numLines = null;
        synchronized (numLinesPerPattern) {
            numLines = numLinesPerPattern.get(property);
            if (numLines == null) {
                numLines = new HashMap<String, TimeList>();
                numLinesPerPattern.put(property, numLines);
            }
        }
        TimeList rtn = null;
        try {
            synchronized (numLines) {
                rtn = numLines.get(key);
                if (rtn == null) {
                    rtn = new TimeList();
                    numLines.put(key, rtn);
                    return rtn;
                }
                return rtn.cloneAndClear();
            }
        } finally {
            synchronized (lastLinesPerPattern) {
                Map<String, TimeList> map = lastLinesPerPattern.get(property);
                if (map == null) {
                    map = new HashMap<String, TimeList>();
                    lastLinesPerPattern.put(property, map);
                }
                map.put(key, rtn);
            }
        }
    }
    
    private static TimeList getLastCachedValue(String property, String key) {
        synchronized (lastLinesPerPattern) {
            Map<String, TimeList> map = lastLinesPerPattern.get(property);
            if (map == null) {
                map = new HashMap<String, TimeList>();
                lastLinesPerPattern.put(property, map);
            }
            final TimeList tl = map.get(key);
            if (tl == null || tl.isEmpty()) {
                return null;
            }
            final Iterator<Long> it = tl.iterator();
            final long now = now();
            while (it.hasNext()) {
                long time = it.next();
//                time = roundDownTime(time, 60000);
log.info("checking time=" + TimeUtil.toString(time) + " against " + TimeUtil.toString(now));
                if (time + 60000 < now) {
log.info("remove");
                    it.remove();
                }
            }
            return (tl.isEmpty()) ? null : tl;
        }
    }
/*
    private static long roundDownTime(long approxTime, long interval) {
        return approxTime - (approxTime % interval);
    }
*/
    private static Long now() {
        return System.currentTimeMillis();
    }

    static void incrementNumLines(String property, String key, int offset) {
        Map<String, TimeList> numLines = null;
        synchronized (numLinesPerPattern) {
            numLines = numLinesPerPattern.get(property);
            if (numLines == null) {
                numLines = new HashMap<String, TimeList>();
                numLinesPerPattern.put(property, numLines);
            }
        }
        synchronized (numLines) {
            TimeList num = numLines.get(key);
            if (num == null) {
                num = new TimeList();
                numLines.put(key, num);
            }
            num.addVal(offset);
log.info("incrementNumLines " + property + " / " + key + " timelist=" + num);
        }
    }
    
    private static class TimeList {
        private TreeSet<Long> list;
        private TimeList() {
            list = new TreeSet<Long>(new Comparator<Long>() {
                public int compare(Long o1, Long o2) {
                    return o1.compareTo(o2);
                }
            });
        }
        public TimeList cloneAndClear() {
            TimeList rtn = new TimeList();
            rtn.list = new TreeSet<Long>(list);
            clear();
            return rtn;
        }
        public Iterator<Long> iterator() {
            return list.iterator();
        }
        public Long last() {
            return list.last();
        }
        public TimeList(int i) {
            this();
            list.add(0l);
        }

/* XXX remove!!!
        public TimeRange[] getTimeRanges() {
            if (list.isEmpty()) {
                return new TimeRange[] { new TimeRange(0, Long.MAX_VALUE) };
            }
            Collection<TimeRange> rtn = new ArrayList<TimeRange>();
            Iterator<Long> it = list.iterator();
            long last = 0;
            while (it.hasNext()) {
                long t1 = it.next();
                rtn.add(new TimeRange(last, t1));
                last = t1;
                if (!it.hasNext()) {
                    rtn.add(new TimeRange(t1, Long.MAX_VALUE));
                }
            }
            return rtn.toArray(new TimeRange[0]);
        }
*/

        public String toString() {
            StringBuilder rtn = new StringBuilder();
            for (Long l : list) {
                rtn.append(TimeUtil.toString(l)).append(",");
            }
            return rtn.toString();
        }
        public boolean isEmpty() {
            return list.isEmpty();
        }
        public int size() {
            return list.size();
        }
        public void clear() {
            list.clear();
        }
        private void addVal(int offset) {
            long now = now();
log.info("adding " + TimeUtil.toString(now));
            list.add(now + offset);
        }
    }
    
/* XXX remove!!!
    private static class TimeRange {
        private final long t1;
        private final long t2;
        private int num = 0;
        private TimeRange(long t1, long t2) {
            this.t1 = t1;
            this.t2 = t2;
        }
        public int getNum() {
            return num;
        }
        public void increment() {
            num++;
        }
    }
*/

    private static class TimeValuePair {
        private final Long time;
        private AtomicInteger val;
        private TimeValuePair(Long time, Integer val) {
            this.time = time;
            this.val = new AtomicInteger(1);
        }
        public void increment() {
            val.incrementAndGet();
        }
        public void setVal(int val) {
            this.val.set(val);
        }
        private Integer getVal() {
            return val.get();
        }
        private Long getTime() {
            return time;
        }
    }

}