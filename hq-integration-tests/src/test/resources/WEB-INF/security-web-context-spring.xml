<!--

    NOTE: This copyright does *not* cover user programs that use HQ
    program services by normal system calls through the application
    program interfaces provided as part of the Hyperic Plug-in Development
    Kit or the Hyperic Client Development Kit - this is merely considered
    normal use of the program, and does *not* fall under the heading of
     "derived work".

     Copyright (C) [2009-2012], VMware, Inc.
     This file is part of HQ.

     HQ is free software; you can redistribute it and/or modify
     it under the terms version 2 of the GNU General Public License as
     published by the Free Software Foundation. This program is distributed
     in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     even the implied warranty of MERCHANTABILITY or FITNESS FOR A
     PARTICULAR PURPOSE. See the GNU General Public License for more
     details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
     USA.


-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/security 
           http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<sec:filter-chain-map path-type="ant">
             <sec:filter-chain pattern="/rest/**" filters="securityContextPersistenceFilter,
																basicAuthenticationFilter,
																basicAuthenticationExceptionTranslationFilter,
																apiBasicSessionManagementFilter,
			    	                                     		filterSecurityInterceptor"/>                                     			                                   
		</sec:filter-chain-map>
	</bean>

	<!-- Setup security context persistence filter -->
	<bean id="securityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />

	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="securityContextRepository" ref="securityContextRepository" />
	</bean>

	<!-- For logout -->
	<!-- 
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/app/login" />
		<constructor-arg>
			<list>
				<bean class="org.hyperic.hq.ui.security.SessionManagingLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>
	 -->

	<!-- For basic authentication -->
	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
	</bean>

	<bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="HQ-Realm" />
	</bean>

	<bean id="basicAuthenticationExceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
		</property>
	</bean>
	
	<!-- For REST API with basic authentication -->
	<bean id="apiBasicSessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<constructor-arg ref="securityContextRepository" />
		<property name="sessionAuthenticationStrategy" ref="apiSessionInitializationStrategy" />
	</bean>
	
	<bean id="apiSessionInitializationStrategy" class="org.hyperic.hq.api.security.ApiSessionInitializationStrategy" /> 

	<!-- For form-based authentication -->
	<bean id="httpSessionRequestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache" />
	
		<!-- Request cache aware filter, this makes sure the original request is used after authenticating -->
	<bean id="requestCacheAwareFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter" />
	
	<!-- Security context holder aware request filter --> 
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

	<!-- Setup the filter security interceptor -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager">
			<bean class="org.springframework.security.access.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false" />
				<property name="decisionVoters">
					<list>
						<bean class="org.springframework.security.access.vote.RoleVoter" />
					</list>
				</property>
			</bean>
		</property>
		<property name="securityMetadataSource">
			<sec:filter-security-metadata-source>
		    	<sec:intercept-url pattern="/app/login" access="ROLE_ANONYMOUS,ROLE_HQ_USER" />
		    	<sec:intercept-url pattern="/**" access="ROLE_HQ_USER" />
		    	<sec:intercept-url pattern="/hqu/hqapi*/**" access="ROLE_HQ_USER" />
			</sec:filter-security-metadata-source>
		</property>
	</bean>	
	
</beans>