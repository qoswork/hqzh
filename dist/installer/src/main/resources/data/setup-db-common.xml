<?xml version="1.0"?>

<!DOCTYPE project [
    <!ENTITY hibernate-build SYSTEM "setup-db-hibernate.xml">
]>

<project name="setup-db-common" default="direct-error" basedir=".">

  &hibernate-build;

  <property name="data.dir" value="${install.dir}/data/tmp" />
	<property name="dbsetup-subsystems" value="appdef,auth,authz,control,events,measurement,bizapp,common,scheduler,agtmgmt,rt,pdk,hqu" />

	<target name="direct-error">
		<fail>
      This buildfile is used as a utility for other setup files.
      Do not invoke it directly.
    </fail>
	</target>

	<path id="alljars">
		<fileset dir="${install.dir}/lib" includes="*.jar" />
	</path>


	<target name="init-taskdefs">
		<echo>^^^DEBUG: Loading taskdefs...</echo>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="alljars" />
		<taskdef resource="org/hyperic/tools/ant/ant-tools.properties" classpathref="alljars" />
		
		<typedef name="properties-merge-filter" classname="org.hyperic.tools.ant.PropertiesMergerTask$Filter" classpathref="alljars" />
		<typedef name="tables" classname="org.hyperic.tools.dbmigrate.TableProcessor$TablesContainer" classpathref="alljars" />
		
		<echo>^^^DEBUG: Taskdefs loaded</echo>
	</target>

	<target name="dbsetup-process-file">
		<property name="server.jdbc-url" value="${server.database-url}" />

		<echo message="using: ${server.jdbc-url}" />
		<dbsetup xmlFile="${dbsetupfile}" jdbcUrl="${server.jdbc-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" typeMap="${install.dir}/data/common-dbsetup-typemap.xml" data="${data}" noexec="false" uninstall="${uninstall}" appendToSqlFile="false" />
	</target>

	<!-- This only drops and re-sets-up the EAM_CONFIG_PROPS table,
       which is all we need to do when using the builtin-db. -->
	<target name="dbsetup-process-configonly">
		<property name="server.jdbc-url" value="${server.database-url}" />

		<echo message="using: ${server.jdbc-url}" />
		<dbsetup xmlFile="${dbsetupfile}" jdbcUrl="${server.jdbc-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" typeMap="${install.dir}/data/common-dbsetup-typemap.xml" data="true" noexec="false" table="EAM_CONFIG_PROPS" delete="true" appendToSqlFile="false" />

		<dbsetup xmlFile="${dbsetupfile}" jdbcUrl="${server.jdbc-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" typeMap="${install.dir}/data/common-dbsetup-typemap.xml" data="true" noexec="false" table="EAM_PRINCIPAL" delete="true" appendToSqlFile="false" />
	</target>

	<target name="subst-props">
		<substProps src="${conf-dir}/hq-server.conf" />
	</target>

	<target name="dbsetup" depends="replace-dbservice-values,hibernate-setup">
		<antcall target="dbsetup-process-file">
			<param name="dbsetupfile" value="${data.dir}/data.xml" />
			<param name="data" value="true" />
			<param name="uninstall" value="false" />
		</antcall>
		<!-- Ensure CAM_SCHEMA_VERSION gets set properly -->
		<antcall target="upgrade-db" />
	</target>

        <target name="dbsetup-import" depends="replace-dbservice-values,hibernate-setup-import">
                <antcall target="dbsetup-process-file">
                        <param name="dbsetupfile" value="${data.dir}/data.xml" />
                        <param name="data" value="true" />
                        <param name="uninstall" value="false" />
                </antcall>
                <!-- Ensure CAM_SCHEMA_VERSION gets set properly -->
                <antcall target="upgrade-db" />
        </target>

	<target name="set-multicast-props" if="server.multicast.addr">
		<!-- Set multicast address and port explicitly -->

		<serverConfigPropsUpgrade jdbcUrl="${server.database-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" encryptionKey="${server.encryption-key}" propKey="CAM_MULTICAST_ADDRESS" propValue="${server.multicast.addr}" />

		<serverConfigPropsUpgrade jdbcUrl="${server.database-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" encryptionKey="${server.encryption-key}" propKey="CAM_MULTICAST_PORT" propValue="${server.multicast.port}" />

	</target>

	<target name="upgrade-db" depends="init-taskdefs,hibernate-prep">
		<condition property="force.cam.schema.version" value="${force.cam.schema.version}" else="LATEST"> 
			<isset property="force.cam.schema.version" />
		</condition> 

		<ant antfile="${install.dir}/data/db-upgrade.xml" target="upgrade" inheritAll="true" inheritRefs="true">
			<property name="jdbc.url" value="${server.database-url}" />
			<property name="jdbc.user" value="${server.database-user}" />
			<property name="jdbc.password" value="${server.database-password}" />
			<property name="typemap.file" value="${install.dir}/data/common-dbsetup-typemap.xml" />
			<property name="schema.target" value="${force.cam.schema.version}" />
			<property name="server.upgradedir" value="${server.upgradedir}" />
		</ant>

		<serverConfigPropsUpgrade jdbcUrl="${server.database-url}" jdbcUser="${server.database-user}" jdbcPassword="${server.database-password}" encryptionKey="${server.encryption-key}" propKey="CAM_SERVER_VERSION" propValue="${version}" />

		<antcall target="set-multicast-props" />
	</target>

	<target name="external-db-dependencies">
		<fail unless="server.database-user">
      No server.database-user property specified.
    </fail>
		<fail unless="server.database-password">
      No server.database-password property specified.
    </fail>
		<fail unless="server.database-url">
      No server.database-url property specified.
    </fail>
	</target>

	<target name="dbsetup-combine" depends="init-taskdefs">
		<mkdir dir="${data.dir}" />
		<dbsetup-cat debug="true" destfile="${data.dir}/data.xml" name="data.xml" notice="Copyright (C) 2004-2010, Hyperic, Inc., All Rights Reserved." order="${dbsetup-subsystems}">
			<fileset dir="${install.dir}/data/sql">
				<include name="*-data.xml" />
				<exclude name="${dbsetup-combine-exclusion-filter}" />
			</fileset>
		</dbsetup-cat>
	</target>

	<target name="replace-dbservice-values" depends="dbsetup-combine">
		<echo>using url: ${server.database-url} </echo>

        <if>
          <not><isset property="server.admin.password.encrypted"/></not>
        <then>
            <crypto value="${server.admin.password}" property="server.admin.password.encrypted" strength="256" encodeHashAsBase64="true" />
        </then>
        </if>

		<!-- replace the admin info in dbsetup data file -->
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@VERSION@@@" value="${hq.version}" />
			<replacefilter token="@@@ADMINUSERNAME@@@" value="${server.admin.username}" />
			<replacefilter token="@@@ADMINPASSWORD@@@" value="${server.admin.password.encrypted}" />
			<replacefilter token="@@@ADMINEMAIL@@@" value="${server.admin.email}" />
			<replacefilter token="@@@BASEURL@@@" value="${server.webapp.baseurl}" />
			<replacefilter token="@@@MAILHOST@@@" value="${server.mail.host}" />
			<replacefilter token="@@@MAILSENDER@@@" value="${server.mail.sender}" />
			<replacefilter token="@@@MULTICAST_ADDR@@@" value="${server.multicast.addr}" />
			<replacefilter token="@@@MULTICAST_PORT@@@" value="${server.multicast.port}" />
		</replace>
		<antcall target="replace-schema-version" />

		<!-- replace jaas info in dbsetup data file -->

		<condition property="server.jaas.provider.jdbc">
			<equals arg1="${server.jaas.provider}" arg2="HQ database" trim="true" casesensitive="false" />
		</condition>

		<condition property="server.jaas.provider.ldap">
			<equals arg1="${server.jaas.provider}" arg2="LDAP" trim="true" casesensitive="false" />
		</condition>

		<antcall target="replace-jaas-provider-jdbc" />
		<antcall target="replace-jaas-provider-ldap" />

		<!-- replace ldap info in dbsetup data file -->

		<condition property="server.ldap.protocol.ssl">
			<equals arg1="${server.ldap.protocol}" arg2="Yes" trim="true" casesensitive="false" />
		</condition>

		<condition property="server.ldap.protocol.none">
			<equals arg1="${server.ldap.protocol}" arg2="No" trim="true" casesensitive="false" />
		</condition>

		<antcall target="replace-ldap-url-set" />
		<antcall target="replace-ldap-url-unset" />
		<antcall target="replace-ldap-loginProperty-set" />
		<antcall target="replace-ldap-loginProperty-unset" />
		<antcall target="replace-ldap-baseDN-set" />
		<antcall target="replace-ldap-baseDN-unset" />
		<antcall target="replace-ldap-bindDN-set" />
		<antcall target="replace-ldap-bindDN-unset" />
		<antcall target="replace-ldap-bindPW-set" />
		<antcall target="replace-ldap-bindPW-unset" />
		<antcall target="replace-ldap-protocol-ssl" />
		<antcall target="replace-ldap-protocol-none" />
		<antcall target="replace-ldap-searchFilter-set" />
		<antcall target="replace-ldap-searchFilter-unset" />
		<antcall target="replace-ldap-groupSearchBase-set" />
		<antcall target="replace-ldap-groupSearchBase-unset" />
		<antcall target="replace-ldap-groupSearchFilter-set" />
		<antcall target="replace-ldap-groupSearchFilter-unset" />
		<antcall target="replace-ldap-groupSearchRoleAttribute-set" />
		<antcall target="replace-ldap-groupSearchRoleAttribute-unset" />
		<antcall target="replace-ldap-groupSearchSubtree-set" />
		<antcall target="replace-ldap-groupSearchSubtree-unset" />
	</target>

	<target name="check-replace-schema-version" if="using.builtin.db">
		<available property="force-schema-version" file="${data.dir}/force-schema-version.properties" />
	</target>
	<target name="replace-schema-version" depends="check-replace-schema-version" if="force-schema-version">
		<property file="${data.dir}/force-schema-version.properties" />
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@CAM_SCHEMA_VERSION@@@" value="${force.cam.schema.version}" />
		</replace>
	</target>

	<target name="replace-jaas-provider-jdbc" if="server.jaas.provider.jdbc">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@JAASPROVIDER@@@" value="JDBC" />
		</replace>
	</target>

	<target name="replace-jaas-provider-ldap" if="server.jaas.provider.ldap">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@JAASPROVIDER@@@" value="LDAP" />
		</replace>
	</target>

	<target name="replace-ldap-url-set" if="server.ldap.url">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPURL@@@" value="${server.ldap.url}" />
		</replace>
	</target>

	<target name="replace-ldap-url-unset" unless="server.ldap.url">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPURL@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-loginProperty-set" if="server.ldap.loginProperty">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPLOGINPROP@@@" value="${server.ldap.loginProperty}" />
		</replace>
	</target>

	<target name="replace-ldap-loginProperty-unset" unless="server.ldap.loginProperty">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPLOGINPROP@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-baseDN-set" if="server.ldap.baseDN">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBASEDN@@@" value="${server.ldap.baseDN}" />
		</replace>
	</target>

	<target name="replace-ldap-baseDN-unset" unless="server.ldap.baseDN">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBASEDN@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-bindDN-set" if="server.ldap.bindDN">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBINDDN@@@" value="${server.ldap.bindDN}" />
		</replace>
	</target>

	<target name="replace-ldap-bindDN-unset" unless="server.ldap.bindDN">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBINDDN@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-bindPW-set" if="server.ldap.bindPW">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBINDPW@@@" value="${server.ldap.bindPW}" />
		</replace>
	</target>

	<target name="replace-ldap-bindPW-unset" unless="server.ldap.bindPW">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPBINDPW@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-protocol-ssl" if="server.ldap.protocol.ssl">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPPROTOCOL@@@" value="ssl" />
		</replace>
	</target>

	<target name="replace-ldap-protocol-none" if="server.ldap.protocol.none">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPPROTOCOL@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-searchFilter-set" if="server.ldap.searchFilter">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPSEARCHFILTER@@@" value="${server.ldap.searchFilter}" />
		</replace>
	</target>

	<target name="replace-ldap-searchFilter-unset" unless="server.ldap.searchFilter">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPSEARCHFILTER@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchBase-set" if="server.ldap.groupSearch.searchBase">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHBASE@@@" value="${server.ldap.groupSearch.searchBase}" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchBase-unset" unless="server.ldap.groupSearch.searchBase">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHBASE@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchFilter-set" if="server.ldap.groupSearch.filter">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHFILTER@@@" value="${server.ldap.groupSearch.filter}" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchFilter-unset" unless="server.ldap.groupSearch.filter">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHFILTER@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchRoleAttribute-set" if="server.ldap.groupSearch.roleAttribute">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHROLEATTRIBUTE@@@" value="${server.ldap.groupSearch.roleAttribute}" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchRoleAttribute-unset" unless="server.ldap.groupSearch.roleAttribute">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHROLEATTRIBUTE@@@" value="" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchSubtree-set" if="server.ldap.groupSearch.subtree">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHSUBTREE@@@" value="${server.ldap.groupSearch.subtree}" />
		</replace>
	</target>

	<target name="replace-ldap-groupSearchSubtree-unset" unless="server.ldap.groupSearch.subtree">
		<replace file="${data.dir}/data.xml">
			<replacefilter token="@@@LDAPGROUPSEARCHSUBTREE@@@" value="" />
		</replace>
	</target>
</project>
