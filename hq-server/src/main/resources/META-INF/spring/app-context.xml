<?xml version="1.0" encoding="UTF-8"?>
<!--

    NOTE: This copyright does *not* cover user programs that use HQ
    program services by normal system calls through the application
    program interfaces provided as part of the Hyperic Plug-in Development
    Kit or the Hyperic Client Development Kit - this is merely considered
    normal use of the program, and does *not* fall under the heading of
     "derived work".

     Copyright (C) [2009-2010], VMware, Inc.
     This file is part of HQ.

     HQ is free software; you can redistribute it and/or modify
     it under the terms version 2 of the GNU General Public License as
     published by the Free Software Foundation. This program is distributed
     in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     even the implied warranty of MERCHANTABILITY or FITNESS FOR A
     PARTICULAR PURPOSE. See the GNU General Public License for more
     details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
     USA.


-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation=
	   "http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

   <!--  two encryption passwords are defined here: the default server.encryption-key system property (used by hyperic server runtime), 
         and the tests.server.encryption-key system property defined in the vm args of the integration tests surefire plugin. 
         If not null the server.encryption-key would override any value defined in the tests.server.encryption-key. 
   -->
   <bean id="jasyptConfiguration" scope="prototype" class="org.hyperic.util.security.StrictEnvironmentPBEConfig">
        <property name="algorithm" value="PBEWithMD5AndDES" />
        <property name="password" value="#{ systemProperties['tests.server.encryption-key'] }" />
        <property name="passwordSysPropertyName" value="server.encryption-key" />
        <property name="poolSize" value="5"  /> 
    </bean>
	
	<bean id="markedStringEncryptor" class="org.hyperic.util.security.MarkedStringEncryptor">
        <property name="config" ref="jasyptConfiguration" />
    </bean>
  
    <bean id="hibernateStringEncryptor" class="org.jasypt.hibernate.encryptor.HibernatePBEStringEncryptor" lazy-init="false">
        <property name="registeredName">
            <value>markedStringEncryptorHibernateWrapper</value>
        </property>
        <property name="encryptor">
            <ref bean="markedStringEncryptor" />
        </property>
    </bean> 
  
    <bean id="propertyPasswordEncryptor"
        class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
        <property name="config" ref="jasyptConfiguration" />
    </bean>

	<!--
		hq-server.conf may be copied to the WEB-INF/classes dir by the
		installer and should override any properties defined in other files,
		so it's last on the list
	-->
	<bean class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer"
          p:ignoreResourceNotFound="true"
          p:systemPropertiesModeName="SYSTEM_PROPERTIES_MODE_OVERRIDE">
        <constructor-arg ref="propertyPasswordEncryptor" />
		<property name="locations">
			<list>
				<value>classpath:/spring-jdbc.properties</value>
				<value>classpath:/mail-config.properties</value>
				<value>classpath:/quartz.properties</value>
				<value>classpath:/jms.properties</value>
				<value>classpath:/hibernate.properties</value>
				<value>classpath:/tweak.properties</value>
				<value>file:#{ systemProperties['user.home'] }/.hq/build.properties</value>
				<value>classpath:/hq-server.conf</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<prop key="ha.partition"></prop>
				<prop key="ha.node.address"></prop>
				<prop key="ha.node.mcast_addr">238.1.2.3</prop>
				<prop key="ha.node.mcast_port">45566</prop>
				<prop key="ha.node.cacheListener.port">45567</prop>
				<prop key="ha.node.cacheProvider.port">45568</prop>
				<prop key="ha.node.ipTTL">64</prop>
                <prop key="server.pluginsync.enabled">true</prop>
                <prop key="server.management.calc-freeze-time">30</prop>
                <prop key="server.management.max-calc-freeze-time">90</prop>
                <prop key="server.custom.plugin.dir"></prop>
                <prop key="vfabric.licenseServer.url"></prop>
                <prop key="vcops.license.key"></prop>
                <prop key="vcloud.license.key"></prop>
                <prop key="vsphere.license.key"></prop>
                <prop key="vc.sync.interval.minutes">2</prop>
				<prop key="server.keystore.path">hyperic.keystore</prop>
				<prop key="server.keystore.password">hyperic</prop>
				<prop key="accept.unverified.certificates">false</prop>
			</props>
		</property>
	</bean>
	
    <bean id="lazyDataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource"><ref local="tomcatDataSource"/></property>
    </bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="lazyDataSource"/>
	</bean>

	<bean id="tomcatDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
				p:driverClassName="${server.database-driver}" p:url="${server.database-url}"
				p:username="${server.database-user}" p:password="${server.database-password}"
				p:defaultAutoCommit="false" p:minIdle="${server.database-minpoolsize}"
				p:maxActive="${server.database-maxpoolsize}" p:maxIdle="${server.database-maxpoolsize}" 
				p:initialSize="${server.database-minpoolsize}"
				p:maxWait="${server.database-blockingtimeout}" 
                p:jdbcInterceptors="ConnectionState;StatementFinalizer"
                destroy-method="close"
				p:validationQuery="${server.connection-validation-sql}"
				p:validationInterval="30000" p:logAbandoned="true" p:testOnBorrow="true" p:defaultTransactionIsolation="2" />
				
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<entry key="hyperic.jmx:type=DataSource,name=tomcat.jdbc"
					value-ref="tomcatDataSource" />
			</map>
		</property>
	</bean>
	
	<bean scope="prototype" id="org.hyperic.hq.bizapp.agent.client.SecureAgentConnection" class="org.hyperic.hq.bizapp.agent.client.SecureAgentConnection" />

	<context:component-scan base-package="org.hyperic,com.hyperic"> 
	   <context:exclude-filter type="regex" expression="org.hyperic.cm.*"/>
	   <context:exclude-filter type="regex" expression="org.hyperic.hq.api.*"/>
	</context:component-scan>

	<bean id="sessionFactory"  
		class="org.hyperic.hibernate.CacheInitializingLocalSessionFactoryBean" destroy-method="destroy">
		<constructor-arg ref="preloadCaches"/>
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations" value="classpath:/hibernate/**/*.hbm.xml" />
		<property name="hibernateProperties">
			<bean
				class="org.springframework.beans.factory.config.PropertiesFactoryBean"
				p:ignoreResourceNotFound="true">
				<property name="properties">
					<props>
						<prop key="hibernate.connection.driver_class">${server.database-driver}</prop>
						<prop key="hibernate.connection.url">${server.database-url}</prop>
						<prop key="hibernate.connection.username">${server.database-user}</prop>
						<prop key="hibernate.connection.password">${server.database-password}</prop>
						<prop key="hibernate.dialect">${server.hibernate.dialect}</prop>
						<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
					</props>
				</property>
				<property name="localOverride" value="true" />
			</bean>
		</property>
		<property name="entityInterceptor">
			<bean class="org.hyperic.hibernate.HypericInterceptor" />
		</property>
	</bean>
	
	<util:list id="preloadCaches">
		<value>org.hyperic.hq.authz.server.session.Resource</value>
		<value>org.hyperic.hq.authz.server.session.ResourceType</value>
	    <value>org.hyperic.hq.authz.server.session.ResourceGroup</value>
	    <value>org.hyperic.hq.appdef.AgentType</value>
	    <value>org.hyperic.hq.appdef.Agent</value>
	    <value>org.hyperic.hq.appdef.server.session.PlatformType</value>
	    <value>org.hyperic.hq.appdef.server.session.ServerType</value>
	    <value>org.hyperic.hq.appdef.server.session.ServiceType</value>
	    <value>org.hyperic.hq.appdef.server.session.Platform</value>
	    <value>org.hyperic.hq.appdef.server.session.Server</value>
		<value>org.hyperic.hq.appdef.server.session.Service</value>
	    <value>org.hyperic.hq.measurement.server.session.Category</value>
	    <value>org.hyperic.hq.measurement.server.session.MonitorableType</value>
	    <value>org.hyperic.hq.measurement.server.session.ScheduleRevNum</value>
	</util:list>

	<util:list id="preregisterZevents">
		<value>org.hyperic.hq.measurement.server.session.MeasurementZevent</value>
		<value>org.hyperic.hq.zevents.HeartBeatZevent</value>
	</util:list>
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:defaultTimeout="900">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<tx:annotation-driven />

	<bean class="org.springframework.orm.hibernate3.HibernateTemplate">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.jobStore.driverDelegateClass">${server.quartzDelegate}</prop>
				<prop key="org.quartz.scheduler.rmi.export">${quartz.scheduler.rmi.export}</prop>
				<prop key="org.quartz.scheduler.rmi.proxy">${quartz.scheduler.rmi.proxy}</prop>
				<prop key="org.quartz.threadPool.class">${quartz.threadPool.class}</prop>
				<prop key="org.quartz.threadPool.threadCount">${quartz.threadPool.threadCount}</prop>
				<prop key="org.quartz.threadPool.threadPriority">${quartz.threadPool.threadPriority}</prop>
				<prop key="org.quartz.jobStore.useProperties">${quartz.jobStore.useProperties}</prop>
                                <prop key="org.quartz.scheduler.skipUpdateCheck">${quartz.scheduler.skipUpdateCheck}</prop>
                                <prop key="org.terracotta.quartz.skipUpdateCheck">${quartz.scheduler.skipUpdateCheck}</prop>
			</props>
		</property>
	</bean>

	<bean id="runtimeReportProcessor"
		class="org.hyperic.hq.autoinventory.server.session.RuntimeReportProcessor"
		scope="prototype" />

	<bean class="org.hyperic.hq.appdef.server.session.ResourceTreeGenerator" />

	<bean id="tweakProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean"
		p:location="classpath:/tweak.properties" />


	<bean id="securityProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="server.keystore.path">${server.keystore.path}</prop>
				<prop key="server.keystore.password">${server.keystore.password}</prop>
				<prop key="accept.unverified.certificates">${accept.unverified.certificates}</prop>
			</props>
		</property>	
	</bean>
	
	
	<bean id="VCProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="vc.sync.interval.minutes">${vc.sync.interval.minutes}</prop>
			</props>
		</property>	
	</bean>
	
	<context:mbean-export />
	<context:mbean-server />

	<bean class="org.hyperic.hq.transport.util.AsynchronousInvoker">
		<constructor-arg value="4" />
	</bean>

	<!--
		This bean refers to various classes that should be loaded at startup.
		Its only interest is loading the classes listed to have static blocks
		in them executed (which typically register event types)
	-->
	<util:list id="triggers">
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.AlertTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.ConfigChangedTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.ValueChangeTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.ControlEventTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.CustomPropertyTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.LogEventTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.MeasurementThresholdTrigger" />
		<bean class="org.hyperic.hq.bizapp.server.trigger.conditional.ValueChangeTrigger" />
	</util:list>

	<!--
		This bean refers to various classes that should be loaded at startup.
		Its only interest is loading the classes listed to have the
		no-argument constructor called to do some initialization.
	-->
	<util:list id="actions">
		<bean class="org.hyperic.hq.bizapp.server.action.integrate.OpenNMSAction" />
	</util:list>
	
    <task:annotation-driven scheduler="scheduler"/>
	<task:scheduler id="scheduler" pool-size="8"/>
	
    <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" id="measurementEnablerExecutor" p:poolSize="2">
        <property name="threadFactory">
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory" p:daemon="true">
                <constructor-arg value="measurement-enabler-exec-"/>
            </bean>
        </property>
    </bean>
	
    <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" id="notificationFilterExecutor" p:poolSize="1">
        <property name="threadFactory">
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory" p:daemon="true">
                <constructor-arg value="notification-filter-exec-"/>
            </bean>
        </property>
    </bean>
	
    <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" id="notificationExecutor" p:poolSize="2">
        <property name="threadFactory">
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory" p:daemon="true">
                <constructor-arg value="notification-endpoint-exec-"/>
            </bean>
        </property>
    </bean>
	
	<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" id="concurrentStatsScheduler" p:poolSize="2">
		<property name="threadFactory">
            <bean class="org.springframework.scheduling.concurrent.CustomizableThreadFactory" p:daemon="true">
                <constructor-arg value="hqstats-sampler-"/>
            </bean>
		</property>
	</bean>
	
	<!--  Executor that ControlManager uses to run tasks that wait for control action results -->
	<task:executor id="controlExecutor" pool-size="1-5" queue-capacity="500" rejection-policy="CALLER_RUNS"/>

	<bean class="org.hyperic.hq.application.Scheduler">
		<constructor-arg value="10" />
	</bean>

    <bean class="org.hyperic.hq.common.Log4jWatcher">
        <constructor-arg value="/log4j.xml"/>
    </bean>

</beans>
