#********************************************************************
# Java Service Wrapper Properties for Hyperic HQ Server
#********************************************************************

# Default JAVA_HOME.  hq-server script will override with actual JAVA_HOME or HQ_JAVA_HOME env variables if set
set.JAVA_HOME=../../jre

# Relative path below won't work.  Expect the hq-server script to update this to an absolute path at runtime.
set.SERVER_INSTALL_HOME=../..

# Java Application
wrapper.java.command=%JAVA_HOME%/bin/java

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1=../../lib/*.jar
wrapper.java.classpath.2=../../wrapper/lib/*.jar
wrapper.java.classpath.3=../../conf


# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=%LD_LIBRARY_PATH%
wrapper.java.library.path.2=../../wrapper/lib

# These are the parameters for the server bootstrap program.
# It is unlikely that you will need to change these
# To change the parameters passed to the HQ engine, modify the server.java.opts property in hq-server.conf
# Java Additional Parameters
wrapper.java.additional.1=-Xmx128m
wrapper.java.additional.2=-Dserver.home="%SERVER_INSTALL_HOME%"
wrapper.java.additional.2.stripquotes=TRUE
wrapper.java.additional.3=-Dengine.home="%SERVER_INSTALL_HOME%/hq-engine"
wrapper.java.additional.3.stripquotes=TRUE


# Initial Java Heap Size (in MB)
#wrapper.java.initmemory=3

# Maximum Java Heap Size (in MB)
#wrapper.java.maxmemory=64

# Application parameters.  Add parameters as needed starting from 1
#wrapper.app.parameter.1=
wrapper.app.parameter.1=org.hyperic.bootstrap.HQServer
wrapper.app.parameter.2=1
wrapper.app.parameter.3=start

# The start parameters are followed by the name of the class whose main
# method is to be called to stop the application.  The stop class name
# is followed by a flag which controls whether or not the Wrapper should
# wait for all non daemon threads to complete before exiting the JVM.
# The flag is followed by the number of parameters to be passed to the
# stop class's main method.  Finally comes the actual parameters.
wrapper.app.parameter.4=org.hyperic.bootstrap.HQServer
wrapper.app.parameter.5=true
wrapper.app.parameter.6=1
wrapper.app.parameter.7=stop

wrapper.request_thread_dump_on_failed_jvm_exit=TRUE

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=../../logs/wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=5000k

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=5

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=Hyperic HQ Server

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.ntservice.name=Hyperic HQ Server

# Display name of the service
wrapper.ntservice.displayname=Hyperic HQ Server

# Description of the service
wrapper.ntservice.description=Server for Hyperic HQ

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

# Controls whether or not the wrapper will respond to Windows LogOff events when running in console mode
wrapper.ignore_user_logoffs=TRUE

# limit the number of JVM restarts
wrapper.max_failed_invocations=5
# if running for over 60 sec assume it was successfully started
wrapper.successful_invocation_time=60

# The amount of time to wait for the HQServer stop command to finish before terminating the process.
# We wait 60 seconds for postgres to stop, so 90 seconds total should be sufficient
wrapper.shutdown.timeout=90

#Disable automatic restart by wrapper if unreachable by ping
wrapper.ping.timeout=0

#restart when System.exit(12) is invoked 
wrapper.on_exit.12=RESTART